
동적계획법(Dynamic Programming)

특정 범위까지의 값을 구하기 위해서 그것과 다른 범위까지의 값을 이용하여 효율적으로 값을 구하는 알고리즘 설계 기법

기본적인 접근방식은 분할정복 알고리즘 하고 비슷하다.
주어진 문제를 부분 문제로 나누어 각 부분 문제의 답을 계산하고, 이 계산한 결과값을 이용해 원래 문제의 답을 산출하기 때문이다.

부분 문제를 최대한 많이 이용하도록 나눈 다음,
주어진 부분 문제의 정답을 한 번만 계산하고 저장해둔 뒤 다시 한 번 이 부분 문제를 이용할 때에는 저장해둔 정답을 바로 산출하여 이용함으로써 속도를 향상

기본적으로 어떤 알고리즘 문제를 보았을 경우,
가장 쉽게 주어진 시간 및 입력값의 범위를 토대로 너무 많은 방법이 도출된다는 느낌이 든다면, "계산한 결과값을 이용" 해야된다.

Dynamic Programming

0. 오직 입력값만이 결과값에 영향을 준다.
1. Overlapping SubProblem 중복된 하위문제들이 존재한다.
2. Optimal Substructure 최적화된 부분구조를 가지고 있다.


종류

1.하향식접근(Top-Down)

하위 문제에 대한 정답을 계산했는지 확인해가며 하향식으로 문제를 자연스럽게 풀어나가는 방식
-> 재귀적인 구조를 가지고 있음.

필요한 부분의 값만 계산하여 저장한다.

* 메모이제이션
컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써,
동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술

2. 상향식접근(Bottom-Up)

범위 안에 모든 값을 다 구한다

타뷸레이션
메모이제이션과 비슷하지만, "값을 미리 계산" 해둔다.
즉, 메모이제이션이 결과가 필요해질 때 계산한다면(Lazy-Evaluation) 타뷸레이션은 필요하지 않은 값도 미리 계산해둔다(Eager-Evaluation)는 차이가 있다.
초기화 오버헤드가 있지만 일단 계산해둔 값은 시간복잡도가 상수 시간(O(1))이 된다.

